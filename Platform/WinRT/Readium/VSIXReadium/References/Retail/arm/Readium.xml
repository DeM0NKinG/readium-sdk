<?xml version="1.0"?>
<doc>
    <assembly>
        "Readium"
    </assembly>
    <members>
        <member name="M:Readium.Library.LoadLibrary(Windows.Storage.IStorageFile)">
Returns the singleton Library instance by loadin from a saved file.
<param name="savedLibrary">A file generated by WriteToFile().</param><returns>The single Library instance for this application.</returns></member>
        <member name="M:Readium.Library.MainLibrary">
Creates or returns the singleton Library instance.
</member>
        <member name="M:Readium.Library.#ctor(ePub3.Library*)">
Creates a library object from a native Library.
</member>
        <member name="T:Readium.Library">
            <summary>
                <para>
This is a library in the smallest sense: it keeps track of ePub files
by their unique-identifier, storing the path to that ePub file *as given*. Its
primary presence here is to allow for inter-publication linking. It is also
designed to be subclassed in order to serve as the basis of a complete library
in an application, with all the additional functionality that would involve.
</para>
                <para>
Note that each application would have a single library, accessible only through
the MainLibrary() static method. A library can optionally be written out to
disk and then loaded back in by calling MainLibrary() with a Locator instance
at application startup. Once the singleton instance has been created,
MainLibrary() will ignore its argument and always return that instance.
</para>
            </summary>
            <remarks>
Thoughts: OCF allows for multiple packages to be specified, but I don't see any
handling of that in ePub3 CFI?
</remarks>
        </member>
        <member name="P:Readium.ErrorHandling.Default">

If you replace the default error handler, you can call this to either
delegate some errors back to default handling, or to remove your handler
(putting the default handler back in its place).
</member>
        <member name="F:Readium.FilterPriority.ValidationComplete">
Any items below this priority level are free to make platform-specific changes. Any validation
will already have taken place by now.
</member>
        <member name="F:Readium.FilterPriority.EPUBDecryption">
This is the priority at which XML-ENC and XML-DSig filters take place.
</member>
        <member name="F:Readium.FilterPriority.MustAccessRawBytes">
If you absolutely must see the bytes EXACTLY as they exist in the container, use this priority.
</member>
        <member name="P:Readium.Container.Creator">
            <summary>
		Gets/sets the ContentModule which created this container, if any.

		Note that a Creator may only be set once. Any attempt to set another Creator will raise an exception.
	</summary>
        </member>
        <member name="M:Readium.Container.ReadStreamAtPath(System.String)">
            <summary>
	Obtains a pointer to a ReadStream for a specific file within the container.
</summary>
            <param name="path">
	A container-relative path to the file whose data to read.
</param>
            <result>
	A stream to the specified file.
</result>
        </member>
        <member name="M:Readium.Container.EncryptionInfoForPath(System.String)">
            <summary>
	Retrieves the encryption information for a specific file within the container.
</summary>
            <param name="path">
	A container-relative path to the item whose encryption information to retrieve.
</param>
            <result>
	Returns the encryption information, or <c>nullptr</c> if none was found.
</result>
        </member>
        <member name="M:Readium.Container.EncryptionData">
All information from META-INF/encryption.xml
</member>
        <member name="M:Readium.Container.Version">
The version number of this container's data.
</member>
        <member name="M:Readium.Container.DefaultPackage">
The default (first in the list) package instance
</member>
        <member name="M:Readium.Container.Packages">
All instantiated packages
</member>
        <member name="M:Readium.Container.PackageLocations">
ePub-relative paths for all packages
</member>
        <member name="T:Readium.MediaSupportType">
Possible types of support provided.
</member>
        <member name="F:Readium.MediaSupportType.SupportedWithHandler">
The publication provides a DHTML handler for this media type.
</member>
        <member name="F:Readium.MediaSupportType.IntrinsicSupport">
The rendering engine understands this media type with no outside help.
</member>
        <member name="F:Readium.MediaSupportType.Unsupported">
The media type is not supported.
</member>
        <member name="T:Readium.PageProgression">
Enumeration for page progression directions.
</member>
        <member name="F:Readium.PageProgression.LeftToRight">
Pages flow from left to right, as in English.
</member>
        <member name="F:Readium.PageProgression.Default">
Assume based on language, etc.
</member>
        <member name="T:Readium.PageSpread">
Enumeration for page spreads.
</member>
        <member name="F:Readium.PageSpread.Right">
This is the right page of a spread.
</member>
        <member name="F:Readium.PageSpread.Left">
This is the left page of a spread.
</member>
        <member name="F:Readium.PageSpread.Automatic">
No value specified by the author.
</member>
        <member name="T:Readium.DCType">
Enumerated constants for the DCMES metadata attributes used by EPUB 3.
</member>
        <member name="F:Readium.DCType.Custom">
A non-DCMES metadata value, identified only by its property IRI.
</member>
        <member name="F:Readium.DCType.Type">
The type of content encoded in this publication, e.g. book, annotations, minutes, etc.
</member>
        <member name="F:Readium.DCType.Subject">
The topic or topics which form the subject of the publication.
</member>
        <member name="F:Readium.DCType.Source">
An identifier for the source of this EPUB, e.g. the ISBN of an original print edition.
</member>
        <member name="F:Readium.DCType.Rights">
Information about rights associated with the publication.
</member>
        <member name="F:Readium.DCType.Relation">
An identifier for a related resource.
</member>
        <member name="F:Readium.DCType.Publisher">
Details of the publisher of the work.
</member>
        <member name="F:Readium.DCType.Format">
Information on the format in which the publication is rendered.
</member>
        <member name="F:Readium.DCType.Description">
A description of the publication's contents.
</member>
        <member name="F:Readium.DCType.Date">
The original publication date (*not* the modification date).
</member>
        <member name="F:Readium.DCType.Creator">
The name of a primary creator.
</member>
        <member name="F:Readium.DCType.Coverage">
Spatial or temporal context of the publication.
</member>
        <member name="F:Readium.DCType.Contributor">
The name of a secondary contributor.
</member>
        <member name="F:Readium.DCType.Language">
The language in which the publication is rendered.
</member>
        <member name="F:Readium.DCType.Title">
The title of the publication.
</member>
        <member name="F:Readium.DCType.Identifier">
A unique identifier.
</member>
        <member name="F:Readium.DCType.Invalid">
An invalid value.
</member>
        <member name="M:ePub3.RunLoop.ProcessEventSource(std.shared_ptr&lt;ePub3.RunLoop.EventSource&gt;)">

Process a firing event source
</member>
        <member name="M:ePub3.RunLoop.ProcessTimer(std.shared_ptr&lt;ePub3.RunLoop.Timer&gt;)">

Process a firing timer
</member>
        <member name="M:ePub3.RunLoop.RunObservers(System.UInt32)">

Runs all observers matching the given activity
</member>
        <member name="M:ePub3.RunLoop.#ctor(ePub3.RunLoop*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

No move constructor
</member>
        <member name="M:ePub3.RunLoop.#ctor(ePub3.RunLoop!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

No copy constructor
</member>
        <member name="M:ePub3.RunLoop.#ctor">

Obtains the run loop for the current thread.
</member>
        <member name="M:ePub3.RunLoop.RunInternal(System.Boolean,std.chrono.duration&lt;System.Int64,std.ratio&lt;0x01,0x03b9aca00&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Internal Run function which takes an explicit timeout duration type.
</member>
        <member name="M:ePub3.RunLoop.WakeUp">

Explicitly wake the RunLoop, causing it to check timers and event sources.
</member>
        <member name="M:ePub3.RunLoop.IsWaiting">

Whether the RunLoop is currently waiting for an event or timer to fire.
</member>
        <member name="M:ePub3.RunLoop.Stop">

Stops the RunLoop, exiting any invocations of Run() or Run(bool, std::chrono::duration).
</member>
        <member name="M:ePub3.RunLoop.Run">

Runs the RunLoop forever, or until Stop() is called.
</member>
        <member name="M:ePub3.RunLoop.RemoveObserver(std.shared_ptr&lt;ePub3.RunLoop.Observer&gt;)">

Removes an observer from this RunLoop (without cancelling it).
</member>
        <member name="M:ePub3.RunLoop.ContainsObserver(std.shared_ptr&lt;ePub3.RunLoop.Observer&gt;)">

Whether an observer is registered on this runloop.
</member>
        <member name="M:ePub3.RunLoop.AddObserver(std.shared_ptr&lt;ePub3.RunLoop.Observer&gt;)">

Adds an observer to the run loop.
</member>
        <member name="M:ePub3.RunLoop.RemoveEventSource(std.shared_ptr&lt;ePub3.RunLoop.EventSource&gt;)">

Removes an event source from this RunLoop (without cancelling it).
</member>
        <member name="M:ePub3.RunLoop.ContainsEventSource(std.shared_ptr&lt;ePub3.RunLoop.EventSource&gt;)">

Whether an event source is registered on this runloop.
</member>
        <member name="M:ePub3.RunLoop.AddEventSource(std.shared_ptr&lt;ePub3.RunLoop.EventSource&gt;)">

Adds an event source to the run loop.
</member>
        <member name="M:ePub3.RunLoop.RemoveTimer(std.shared_ptr&lt;ePub3.RunLoop.Timer&gt;)">

Removes the timer from this RunLoop (without cancelling it).
</member>
        <member name="M:ePub3.RunLoop.ContainsTimer(std.shared_ptr&lt;ePub3.RunLoop.Timer&gt;)">

Whether a timer is registered on this runloop.
</member>
        <member name="M:ePub3.RunLoop.AddTimer(std.shared_ptr&lt;ePub3.RunLoop.Timer&gt;)">

Adds a timer to the run loop.
</member>
        <member name="M:ePub3.RunLoop.PerformFunction(std.function&lt;(System.Void)&gt;)">

Call a function on the run loop's assigned thread.
</member>
        <member name="M:ePub3.RunLoop.CurrentRunLoop">

This is the only way to obtain a RunLoop. Use it wisely.
</member>
        <member name="M:ePub3.RunLoop.Timer.Repeats">

Tests whether a timer is set to repeat.
</member>
        <member name="M:ePub3.RunLoop.Timer.IsCancelled">

Tests whether a timer has been cancelled.
</member>
        <member name="M:ePub3.RunLoop.Timer.Cancel">

Cancels the timer, causing it to never fire again.
</member>
        <member name="M:ePub3.RunLoop.Timer.op_Equality(ePub3.RunLoop.Timer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Test for equality
</member>
        <member name="M:ePub3.RunLoop.Timer.op_Assign(ePub3.RunLoop.Timer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Move assignment
</member>
        <member name="M:ePub3.RunLoop.Timer.op_Assign(ePub3.RunLoop.Timer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Copy assignment
</member>
        <member name="M:ePub3.RunLoop.Timer.#ctor(ePub3.RunLoop.Timer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Move constructor
</member>
        <member name="M:ePub3.RunLoop.Timer.#ctor(ePub3.RunLoop.Timer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Copy constructor
</member>
        <member name="M:ePub3.RunLoop.Timer.#ctor">

No default constructor.
</member>
        <member name="F:ePub3.RunLoop.Timer._timer">

Timers always use the system clock.
</member>
        <member name="M:ePub3.RunLoop.EventSource.Signal">

Signal the event source, causing it to fire on one of its associated RunLoops.
</member>
        <member name="M:ePub3.RunLoop.EventSource.Cancel">

Cancel the event source, so it will never fire again.
</member>
        <member name="M:ePub3.RunLoop.EventSource.IsCancelled">

Whether the event source has been cancelled.
</member>
        <member name="M:ePub3.RunLoop.EventSource.op_Equality(ePub3.RunLoop.EventSource!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Test for equality.
</member>
        <member name="M:ePub3.RunLoop.EventSource.op_Assign(ePub3.RunLoop.EventSource*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Move assignment
</member>
        <member name="M:ePub3.RunLoop.EventSource.op_Assign(ePub3.RunLoop.EventSource!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Copy assignment
</member>
        <member name="M:ePub3.RunLoop.Observer.Cancel">

Cancels the observer, causing it never to fire again.
</member>
        <member name="M:ePub3.RunLoop.Observer.IsCancelled">

Whether the observer has been cancelled.
</member>
        <member name="M:ePub3.RunLoop.Observer.Repeats">

Whether this observer will post multiple events.
</member>
        <member name="M:ePub3.RunLoop.Observer.GetActivities">

Retrieves the activities monitored by this observer.
</member>
        <member name="M:ePub3.RunLoop.Observer.op_Equality(ePub3.RunLoop.Observer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Test for equality with another observer
</member>
        <member name="M:ePub3.RunLoop.Observer.op_Assign(ePub3.RunLoop.Observer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Move assignment
</member>
        <member name="M:ePub3.RunLoop.Observer.#ctor(ePub3.RunLoop.Observer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Move constructor
</member>
        <member name="M:ePub3.RunLoop.Observer.#ctor(ePub3.RunLoop.Observer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Copy constructor
</member>
        <member name="M:ePub3.RunLoop.Observer.#ctor(System.UInt32,System.Boolean,std.function&lt;(ePub3.RunLoop.Observer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)(ePub3.RunLoop.Observer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;,System.UInt32)&gt;)">
Creates a RunLoop observer.
@param activities The ActivityFlags defining the activities to observe.
@param repeats Whether the observer should fire more than once.
@param fn The function to call when an observed activity occurs.

</member>
        <member name="D:ePub3.RunLoop.Observer.ObserverFn">

The type of function invoked by an observer.
</member>
        <member name="T:ePub3.RunLoop.Observer.ActivityFlags">

The different Activity flags.
</member>
        <member name="D:ePub3.RunLoop.Observer.Activity">

A bitfield type, used to specify the activities to observe.
</member>
        <member name="D:ssize_t">
@mainpage
@copyright Copyright (c) 2012â€“2013 The Readium Foundation and contributors. Released under the GNU Public License, version 3.
@author Jim Dovey
@author Boris Schneidermann
@author Shane Meyer

 @defgroup utilities Utilities
 
 @defgroup archives Archive Handling
 
 @defgroup epub EPUBÂ® 3 Engine
 @{
    @defgroup epub-model EPUBÂ® 3 Model
    @{
        @defgroup navigation Navigation
    @}

    @defgroup content-proc EPUBÂ® 3 Content Processing
    @{
        @defgroup filters Content Filters
        @defgroup media-handlers Content Handlers
        @defgroup security Encryption and Signatures
    @}
    
    @defgroup events Events Mechanism
 @}
 
 @defgroup xml XML Engine
 @{
    @defgroup validation Content Validation
    @defgroup parsing XML Parsers
    @defgroup tree DOM Tree
    @defgroup xml-utils Utilities
    @defgroup xmlsec XML Security
 @}

</member>
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Readium.Container.FileExistsAtPath(System.String)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.SwitchStaticHandling'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.ObjectPreprocessing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.SwitchStaticHandling'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.ObjectPreprocessing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Readium.Container.FileExistsAtPath(System.String)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Readium.Container.FileExistsAtPath(System.String)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.SwitchStaticHandling'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.ObjectPreprocessing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.SwitchStaticHandling'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.FilterPriority.ObjectPreprocessing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Readium.Library.FileForEPubWithUniqueID(System.String)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Readium.Library.FileForEPubWithPackageID(System.String)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Readium.Container.FileExistsAtPath(System.String)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageSpread.Center'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Readium.PageProgression.RightToLeft'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Readium.Container.FileExistsAtPath(System.String)'. -->
    </members>
</doc>